	file_path = path + image_name + IntToStr( image_start_num ) + image_file_ext;
	
	if ( get_image_size(1, num_rows, num_cols, path, image_name) ) {
    	cout << "\nnum_rows: " << num_rows << " num_cols: " << num_cols << "\n";
    	Images = new int[ num_rows*num_cols*num_images ];
    	for (i = 0; i < num_images; i++) {

    		file_path = path + image_name + IntToStr( image_start_num + i ) + ".tif";

    		flag = importImage(&Images[i*num_rows*num_cols], file_path, num_rows, num_cols);  //import the images

    		cout << "flag: " << flag;

    		if (flag != 1) {
    		    cout << "\nAborting program - could not open images";
    		    return 1;
    		}
    	}
    }	
    // linear now contains all floating point values in the comma-delimited
    // data file.  now dump them to the screen to verify:
    copy( linear.begin(), linear.end(), ostream_iterator<float>( cout, " " ) );
	
	
	
    //Output the image details
    /*
    cout << "\nnum_rows: " << num_rows << " num_cols: " << num_cols << "\n";
    counter = 0;
    for (i = 0; i < num_rows*num_cols*num_images; i++) {
    	cout << counter << " " << images[i] << "\n" ;
    	counter++;
    }
    */
    
    //test out the nearest neighbors and indexing
    int m [9];
    int n [9];
    int num = nearestNeighbors(m, n, 5, 0, 10, 10);
    cout << "num: " << num << "\n" << "m: ";
    for (i = 0; i < num; i++) cout << m[i] << " ";
    cout << "\nn: ";
    for (i = 0; i < num; i++) cout << n[i] << " ";
    cout << "\n";
	
	
		//Write the FLIC curves to file
	file_path = path + exp_name + "_FLIC.txt";
    ofstream myfile (file_path.c_str());
    if (myfile.is_open()) {
    	int counter = 0;
    	for (i =0; i < FLIC_points; i++) {
    		for (j = 0; j < num_angles; j++) {
    			myfile << FLIC[counter] << ", ";
    			counter++;
    		}
    		myfile << "\n";
    	}
    	myfile.close();
    }
    else cout << "Unable to open file for writing the FLIC curves";
    
	
	
	
	
	MKL_INT n = N;
	double a = 3;
	MKL_INT incx = 1;
	MKL_INT incy = 1;

	double x[N];
	double y[N];
	x[0] = 1;
	x[1] = 2;
	x[2] = 3;
	x[3] = 4;
	y[0] = 5;
	y[1] = 5;
	y[2] = 5;
	y[3] = 5;

	std::cout << "hi intel2 Debug!\n";
    std::cout << y[0] << " " << y[1] << " " << y[2] << " " << y[3] << "\n";


    cblas_daxpy(n, a, x, incx, y, incy);

    std::cout << y[0] << " " << y[1] << " " << y[2] << " " << y[3] << "\n";

    complex<double> cmpx2(1, 1), cmpx3;
    cmpx2 +=10;
    cout << cmpx2 << " n1: " << n1 << "\n";
    cmpx3 = 10;
    cmpx3 = 20;
    //cmpx2.re = 4;
    cout << "cmpx2: " << cmpx2*10.0;
    //cmpx2 = trl::asin(cmpx2);



    double params [] = {lambdaEx, 50};

    cout << "\nPex: " << P_Ex_Fromherz_MA(30*DTR, lambdaEx, 50) <<
    		" Pem: " << P_Em_Fromherz_Simple(30*DTR, params);

    double parameters [] = {0, 60*DTR, 50};

    cout << "\nP_Em_theta: " << P_Em_theta(lambdaEx, parameters);
    cout << "\nP_Em_theta_lambda: " << P_Em_theta_lambda(0, 60*DTR, lambdaEmMin, lambdaEmMax, 50);

    //std::string s
	
	time_t start, end;
	time(&start);
	time(&end);
	cout << "\nfinished - time: " << difftime(end,start) << " seconds";
	cout << "\n" << ZGAP[0] << " " << ZGAP[1] << " " << ZGAP[2];
	cout << "\n" << FLIC[0] << " " << FLIC[1] << " " << FLIC[2];
	cout << "\n" << DERIV[0] << " " << DERIV[1] << " " << DERIV[2];
	cout << "\n" << FLIC[0+12*FLIC_points] << " " << FLIC[1+12*FLIC_points] << " " << FLIC[2+12*FLIC_points];
	cout << "\n" << DERIV[0+12*FLIC_points] << " " << DERIV[1+12*FLIC_points] << " " << DERIV[2+12*FLIC_points];



    //nlsq_FLIC_Brute (Images, num_rows, num_cols, num_images, ZGAP, FLIC, DERIV, H2, 350, 1);

    double fobs [13];
    double fFLIC [13];
    double r [13];

    int row = 30;
    int col = 30;

    cout << "\nfobs, fFLic, r:\n";
	for (i = 0; i < num_images; i++) {
		fFLIC[i] = FLIC[i*FLIC_points+52];
		fobs[i] =  Images[getIndex(row, col, i, num_rows, num_cols)];
		r[i] = fobs[i] - 309*fFLIC[i];
		r[i] = sqrt(r[i]*r[i]);
		cout << fobs[i] << " " << fFLIC[i] << " " << r[i] << "\n";
	}
	double r_sum = 0;
	for (i = 0; i < num_rows*num_cols; i++) {
		r_sum = r_sum + R[i];
	}

	cout << "\nH, H2, abs(H1-H2):\n";
	for (i = 0; i < num_rows*num_cols; i++) {
		cout << H[i] << " " << H2[i] << " " << abs(H[i]-H2[i]) << "\n";
	}

	cout << "\nr_sum: " << r_sum << "\n";

	file_path = path + exp_name + "_fobs.csv";
	arrayWriter(fobs, 13, file_path);
	file_path = path + exp_name + "_fFLIC.csv";
	arrayWriter(fFLIC, 13, file_path);



    //Calculate the best estimate height
	/*
    time_t tr_start_time, br_start_time, tr_end_time, br_end_time;
    tr_start_time = time(NULL);
    nlsq_FLIC_local_HAB (Images, num_rows, num_cols, num_images, ZGAP, FLIC, DERIV, H, A, B, R);
    tr_end_time = time(NULL);

    double *H2 = new double[num_rows*num_cols];
    double A_ave = 0;
    double B_ave = 0;


    for (i = 0; i < num_rows*num_cols; i++) {
    	A_ave = A_ave + A[i];
    	B_ave = B_ave + B[i];
    }
    A_ave = A_ave/(num_rows*num_cols);
    B_ave = B_ave/(num_rows*num_cols);

    br_start_time = time(NULL);
    nlsq_FLIC_Brute (Images, num_rows, num_cols, num_images, ZGAP, FLIC, DERIV, H2, A_ave, B_ave, R);
    br_end_time = time(NULL);

	cout << "\nH, H2, abs(H1-H2):\n";
	for (i = 0; i < num_rows*num_cols; i++) {
		cout << H[i] << " " << H2[i] << " " << abs(H[i]-H2[i]) << "\n";
		//cout << H2[i] << "\n";
	}

    cout << "\ntime for nlsg_FLIC_local_HAB: " << tr_end_time - tr_start_time << "\n";
    cout << "time for nlsg_FLIC_Brute: " << br_end_time - br_start_time << "\n";


	file_path = path + exp_name + "H.csv";
	arrayWriter(H, num_cols*num_rows, file_path);
	cout << "\nnum_rows: " << num_rows << " num_cols: " << num_cols << "\n";
	*/


void generateFLICCurves(double* ZGAP, double* FLIC, double* DERIV, int nimages) {

	int i, j, counter;
	double Pex;
	double *Pem;
	Pem = new double[FLIC_points];
	double max_I = -1.0;


	#ifdef _OPENMP
		#pragma omp parallel private(i,j)
	#endif
	{

		#ifdef _OPENMP
			#pragma omp single nowait
		#endif

		#ifdef _OPENMP
			cout << "\ngenerateFLICCurves() is using: " << omp_get_num_threads() << " threads\n";
		#endif


		//Allocate ZGAP, the z-heights of the membrane that the FLIC intensities will be calculated
		//for
		#ifdef _OPENMP
			#pragma omp single
		#endif
		for (i = 0; i<FLIC_points; i++) {
			ZGAP[i] = i*z_gap_spacing;
		}

		//Calculate Pem for each height
		#ifdef _OPENMP
			#pragma omp single nowait
		#endif
		cout << "\nCalculating Pem for FLIC...\n";
		#ifdef _OPENMP
			#pragma omp for
		#endif
		for (j=0; j < FLIC_points; j++) {
			Pem[j] = P_Em_theta_lambda(0, thetaObjMax, lambdaEmMin, lambdaEmMax, ZGAP[j]);
		}

		//Loop through all the input parameters and calculate Pex and Pex*Pem
		#ifdef _OPENMP
			#pragma omp single nowait
		#endif
		cout << "Calculating Pex for FLIC...\n";
		#ifdef _OPENMP
			#pragma omp for
		#endif
		for (i = 0; i < nimages; i++) {
			for (j = 0; j < FLIC_points; j++) {
				Pex = P_Ex_Fromherz_MA(thetaLaser[i], lambdaEx, ZGAP[j]);
				FLIC[i*FLIC_points + j] = Pex*Pem[j];
			}
		}

		//Calculate the derivatives of the FLIC curves
		//Calculate Pem for each height - Deriv
		#ifdef _OPENMP
			#pragma omp single nowait
		#endif
		cout << "Calculating Pem for FLIC - Deriv...\n";
		#ifdef _OPENMP
			#pragma omp for
		#endif
		for (j = 0; j < FLIC_points; j++) {
			Pem[j] = P_Em_theta_lambda(0, thetaObjMax, lambdaEmMin, lambdaEmMax, ZGAP[j]+derivative_step);
		}

		//Loop through all the input parameters and calculate Pex and Pex*Pem - Deriv
		#ifdef _OPENMP
			#pragma omp single nowait
		#endif
		cout << "Calculating Pex for FLIC - Deriv...\n";
		#ifdef _OPENMP
			#pragma omp for
		#endif
		for (i = 0; i < nimages; i++) {
			for (j = 0; j < FLIC_points; j++) {
				Pex = P_Ex_Fromherz_MA(thetaLaser[i], lambdaEx, ZGAP[j]+derivative_step);
				DERIV[i*FLIC_points + j] = (Pex*Pem[j] - FLIC[i*FLIC_points + j])/derivative_step;
			}
		}

		//Normalize the FLIC curves
		#ifdef _OPENMP
			#pragma omp single
		#endif
		for (i = 0; i < nimages*FLIC_points; i++) {
			if (FLIC[i] > max_I) {
				max_I = FLIC[i];
			}
		}

		#ifdef _OPENMP
			#pragma omp for nowait
		#endif
		for (i = 0; i < nimages*FLIC_points; i++) {
			FLIC[i] = FLIC[i]/max_I;
			DERIV[i] = DERIV[i]/max_I;
		}

	} // #pragma omp parallel private(i,j)
}


int nlsq_FLIC_HABA2_global (double* Images, int* pixels, int npix, int nrows, int ncols, int nimages, double* ZGAP,
		double* FLIC, double* DERIV, double* H, double* Ai, double& A, double& B, double* R)
{
	//***********************************Variables, etc*******************************************
	MKL_INT n = npix+nimages+2;			//number of function variables (height of pixel, A, B)
	MKL_INT m = npix*nimages;	//dimension of function value (number of equations)
	double	eps[6];			// precisions for stop-criteria (see manual for more details
	double	*x;				// solution vector. contains values x for f(x)
	MKL_INT	iter1 = 1000;	//maximum number of iterations
	MKL_INT	iter2 = 100;	//maximum number of iterations of calculation of trial-step
	double	rs = 0.0;		//initial step bound
	MKL_INT RCI_Request;	//reverse communication interface parameter
	MKL_INT successful;		//controls of rci cycle
	double *fvec;			//function (f(x)) value vector
	double *fobs;			//The observed value for each function
	double *fjac;			//jacobi matrix
	double	*LW, *UP;		//lower and upper bounds
	MKL_INT iter;			//number of iterations
	MKL_INT st_cr;			//number of stop-criterion
	double r1, r2;			//initial and final residuals
	_TRNSPBC_HANDLE_t handle;	//TR solver handle
	MKL_INT row, col, i, j, k;		//counters
	double h_best, A_best, B_best;	//The best multi-start solution for h, A, and B
	int counter;


	//memory allocation
	x = new double[n];
	fvec = new double[m];
	fobs = new double[m];
	fjac = new double[m*n];
	LW = new double[n];
	UP = new double[n];

	//set precisions for stop-criteria
	for (i = 0; i < 6; i++)
	{
		eps [i] = 0.0000001;
	}

	//set bounds
	for (i = 0; i < npix; i++) {
		LW [i] = h_min;
		UP [i] = h_max;
	}
	for (i=0; i< nimages; i++) {
		LW [npix+i] = 1;
		UP [npix+i]	= 3;
	}
	LW [npix+nimages] = A_min;
	UP [npix+nimages] = A_max;
	LW [npix+nimages+1] = B_min;
	UP [npix+nimages+1] = B_max;

	//Set the initial guess
	for (i = 0; i < npix; i++) x[i] = H[i];
	for (i = 0; i < nimages; i++) x[npix+i] = 1;
	x[npix+nimages] = A;
	x[npix+nimages+1] = B;

	//set initial values
	for (i = 0; i < m; i++)
		fvec [i] = 0.0;
	for (i = 0; i < m*n; i++)
		fjac [i] = 0.0;

	//Set fobs
	counter = 0;
	for (i = 0; i < npix; i++) {
		row = getRow(pixels[i], ncols);
		col = getCol(pixels[i], ncols);
		for (j = 0; j < nimages; j++) {
			fobs[counter] = Images[getIndex(row, col, j, nrows, ncols)];
			counter++;
		}
	}



	//***********************Solve for the best height, A, and B********************************

	/* initialize solver (allocate memory, set initial values)
		handle	in/out:	TR solver handle
		n       in:     number of function variables
		m       in:     dimension of function value
		x       in:     solution vector. contains values x for f(x)
		LW		in:		lower bound
		UP		in:		upper bound
		eps     in:     precisions for stop-criteria
		iter1   in:     maximum number of iterations
		iter2   in:     maximum number of iterations of calculation of trial-step
		rs      in:     initial step bound */
	if (dtrnlspbc_init (&handle, &n, &m, x, LW, UP, eps, &iter1, &iter2, &rs) != TR_SUCCESS)
	{
		// Exit if unsuccessful
		cout << "| error in dtrnlspbc_init\n";
		MKL_FreeBuffers();
		return 1;
	}

	//set initial rci cycle variables
	RCI_Request = 0;
	successful = 0;

	//rci cycle
	while (successful == 0)
	{
		/* call tr solver
			handle		in/out:	tr solver handle
			fvec		in:     vector
			fjac		in:     jacobi matrix
			RCI_request in/out:	return number which denote next step for performing */
		if (dtrnlspbc_solve (&handle, fvec, fjac, &RCI_Request) != TR_SUCCESS)
		{
			// Exit if unsuccessful
			cout << "| error in dtrnlspbc_solve\n";
			MKL_FreeBuffers();
			return 1;
		}

		// according with rci_request value we do next step
		if (RCI_Request == -1 ||
			RCI_Request == -2 ||
			RCI_Request == -3 ||
			RCI_Request == -4 ||
			RCI_Request == -5 ||
			RCI_Request == -6)
			// exit rci cycle
			successful = 1;

		if (RCI_Request == 1)
		{
			// recalculate function value
			for (i = 0; i < npix; i++) {
				for (j = 0; j < nimages; j++) {
					fvec[i*nimages + j] = x[npix+nimages]*x[npix+j]*interpolateFLIC(ZGAP, &FLIC[j*FLIC_points], z_gap_spacing, FLIC_points, x[i]) + x[npix+nimages+1] - fobs[i*nimages + j];
				}
			}
		}
		if (RCI_Request == 2)
		{
			// compute jacobi matrix
			//fjac = df1/dx1, df2/dx1, df3/dx1, df4/dx1,..., df1/dx2, df2/dx2, df2/dx2, df2/dx2,...
			for (i = 0; i < npix; i++) {
				for (j = 0; j < nimages; j++) {
					fjac[i*m + i*nimages + j] = x[npix+nimages]*x[npix+j]*interpolateFLIC(ZGAP, &DERIV[j*FLIC_points], z_gap_spacing, FLIC_points, x[i]);
					fjac[(npix+j)*m + i*nimages + j] = x[npix+nimages]*interpolateFLIC(ZGAP, &FLIC[j*FLIC_points], z_gap_spacing, FLIC_points, x[i]);
					fjac[(npix+nimages)*m + i*nimages + j] = x[npix+j]*interpolateFLIC(ZGAP, &FLIC[j*FLIC_points], z_gap_spacing, FLIC_points, x[i]);
					fjac[(npix+nimages+1)*m + i*nimages + j] = 1;
					//fjac[(npix+2)*m + i*nimages + j] = ...;  if dye dipole angle is also fit
				}
			}
		}
	}

	/* get solution statuses
		handle            in:	TR solver handle
		iter              out:	number of iterations
		st_cr             out:	number of stop criterion
		r1                out:	initial residuals
		r2                out:	final residuals */
	if (dtrnlspbc_get (&handle, &iter, &st_cr, &r1, &r2) != TR_SUCCESS)
	{
		//exit if unsuccessful
		cout << "| error in dtrnlspbc_get\n";
		MKL_FreeBuffers();
		return 1;
	}

	// free handle memory
	if (dtrnlspbc_delete (&handle) != TR_SUCCESS)
	{
		//exit if unsuccessful
		cout << "| error in dtrnlspbc_delete\n";
		MKL_FreeBuffers();
		return 1;
	}

	// Release internal MKL memory
	MKL_FreeBuffers();

	//******************End of Solve for the best height, A, and B****************************

	//Copy the best-fit variables to the output variables
	for (i = 0; i < npix; i++) {
		H[i] = x[i];
	}
	for (i = 0; i< nimages;i++) {
		Ai[i] = x[npix+i];
	}
	A = x[npix+nimages];
	B = x[npix+nimages+1];


	/* free allocated memory */
	delete [] x;
	delete [] fvec;
	delete [] fjac;
	delete [] LW;
	delete [] UP;

	return 1;

}



INT NLSQ_FLIC_HAB_LOCAL (DOUBLE* IMAGES, INT NROWS, INT NCOLS, INT NIMAGES, DOUBLE* ZGAP,
		DOUBLE* FLIC, DOUBLE* DERIV, DOUBLE* H, DOUBLE* A, DOUBLE* B, DOUBLE* R)
{
	//***********************************VARIABLES, ETC*******************************************
	MKL_INT N = 3;			//NUMBER OF FUNCTION VARIABLES (HEIGHT OF PIXEL, A, B)
	MKL_INT M = NIMAGES;	//DIMENSION OF FUNCTION VALUE (NUMBER OF EQUATIONS)
	DOUBLE	EPS[6];			// PRECISIONS FOR STOP-CRITERIA (SEE MANUAL FOR MORE DETAILS
	DOUBLE	*X;				// SOLUTION VECTOR. CONTAINS VALUES X FOR F(X)
	MKL_INT	ITER1 = 1000;	//MAXIMUM NUMBER OF ITERATIONS
	MKL_INT	ITER2 = 100;	//MAXIMUM NUMBER OF ITERATIONS OF CALCULATION OF TRIAL-STEP
	DOUBLE	RS = 0.0;		//INITIAL STEP BOUND
	MKL_INT RCI_REQUEST;	//REVERSE COMMUNICATION INTERFACE PARAMETER
	MKL_INT SUCCESSFUL;		//CONTROLS OF RCI CYCLE
	DOUBLE *FVEC;			//FUNCTION (F(X)) VALUE VECTOR
	DOUBLE *FOBS;			//THE OBSERVED VALUE FOR EACH FUNCTION
	DOUBLE *FJAC;			//JACOBI MATRIX
	DOUBLE	*LW, *UP;		//LOWER AND UPPER BOUNDS
	MKL_INT ITER;			//NUMBER OF ITERATIONS
	MKL_INT ST_CR;			//NUMBER OF STOP-CRITERION
	DOUBLE R1, R2;			//INITIAL AND FINAL RESIDUALS
	_TRNSPBC_HANDLE_T HANDLE;	//TR SOLVER HANDLE
	INT *NN_ROW, *NN_COL;	//STORAGE OF (ROW, COL) OF NEAREST NEIGHBOR PIXELS
	INT NUM_NN;				//THE NUMBER OF NEIGHBORS FOR A GIVEN PIXEL
	MKL_INT ROW, COL, I, J, K;		//COUNTERS
	DOUBLE H_BEST, A_BEST, B_BEST;	//THE BEST MULTI-START SOLUTION FOR H, A, AND B
	DOUBLE R_MIN, R1_MIN;			//HOLDS THE LOWEST RESIDUAL FROM THE MULTI-START SOLUTIONS
	DOUBLE MS_START;

	//MEMORY ALLOCATION
	X = NEW DOUBLE[N];
	FVEC = NEW DOUBLE[M];
	FOBS = NEW DOUBLE[M];
	FJAC = NEW DOUBLE[M*N];
	LW = NEW DOUBLE[N];
	UP = NEW DOUBLE[N];
	NN_ROW = NEW INT[9];
	NN_COL = NEW INT[9];

	//SET PRECISIONS FOR STOP-CRITERIA
	FOR (I = 0; I < 6; I++)
	{
		EPS [I] = 0.0000001;
	}

	//SET BOUNDS
	LW [0] = H_MIN;
	LW [1] = A_MIN;
	LW [2] = B_MIN;
	UP [0] = H_MAX;
	UP [1] = A_MAX;
	UP [2] = B_MAX;

	//LOOP THROUGH ALL THE PIXELS AND CALCULATE THE BEST ESTIMATE OF THE HEIGHT FOR EACH PIXEL
	FOR (ROW = 0; ROW < NROWS; ROW++) {
		FOR (COL = 0; COL < NCOLS; COL++) {

			//GET THE NEAREST NEIGHBOR PIXELS
			NUM_NN = NEARESTNEIGHBORS(NN_ROW, NN_COL, ROW, COL, NROWS, NCOLS);

			//COMPUTE FOBS
			FOR (I = 0; I < NUM_IMAGES; I++) {
				FOR (J = 0; J < NUM_NN; J++) {
					FOBS[I] = FOBS[I] + IMAGES[GETINDEX(NN_ROW[J], NN_COL[J], I, NROWS, NCOLS)];
				}
				FOBS[I] = FOBS[I]/NUM_NN;
			}

			//START A MULTI-START APPROACH TO FIND THE BEST HEIGHT
			R_MIN = NUMERIC_LIMITS<DOUBLE>::INFINITY();
			R1_MIN = NUMERIC_LIMITS<DOUBLE>::INFINITY();

			FOR (MS_START = H_MIN; MS_START <= H_MAX; MS_START = MS_START + MS_STEP) {
				//SET THE INITIAL GUESS
				X[0] = MS_START;
				X[1] = A_GUESS;
				X[2] = B_GUESS;

				//SET INITIAL VALUES
				FOR (I = 0; I < M; I++)
					FVEC [I] = 0.0;
				FOR (I = 0; I < M*N; I++)
					FJAC [I] = 0.0;


				//***********************SOLVE FOR THE BEST HEIGHT, A, AND B********************************

				/* INITIALIZE SOLVER (ALLOCATE MAMORY, SET INITIAL VALUES)
					HANDLE	IN/OUT:	TR SOLVER HANDLE
					N       IN:     NUMBER OF FUNCTION VARIABLES
					M       IN:     DIMENSION OF FUNCTION VALUE
					X       IN:     SOLUTION VECTOR. CONTAINS VALUES X FOR F(X)
					LW		IN:		LOWER BOUND
					UP		IN:		UPPER BOUND
					EPS     IN:     PRECISIONS FOR STOP-CRITERIA
					ITER1   IN:     MAXIMUM NUMBER OF ITERATIONS
					ITER2   IN:     MAXIMUM NUMBER OF ITERATIONS OF CALCULATION OF TRIAL-STEP
					RS      IN:     INITIAL STEP BOUND */
				IF (DTRNLSPBC_INIT (&HANDLE, &N, &M, X, LW, UP, EPS, &ITER1, &ITER2, &RS) !=
					TR_SUCCESS)
				{
					// EXIT IF UNSUCCESSFUL
					COUT << "| ERROR IN DTRNLSPBC_INIT\N";
					MKL_FREEBUFFERS();
					RETURN 1;
				}

				//SET INITIAL RCI CYCLE VARIABLES
				RCI_REQUEST = 0;
				SUCCESSFUL = 0;

				//RCI CYCLE
				WHILE (SUCCESSFUL == 0)
				{
					/* CALL TR SOLVER
						HANDLE		IN/OUT:	TR SOLVER HANDLE
						FVEC		IN:     VECTOR
						FJAC		IN:     JACOBI MATRIX
						RCI_REQUEST IN/OUT:	RETURN NUMBER WHICH DENOTE NEXT STEP FOR PERFORMING */
					IF (DTRNLSPBC_SOLVE (&HANDLE, FVEC, FJAC, &RCI_REQUEST) != TR_SUCCESS)
					{
						// EXIT IF UNSUCCESSFUL
						COUT << "| ERROR IN DTRNLSPBC_SOLVE\N";
						MKL_FREEBUFFERS();
						RETURN 1;
					}

					// ACCORDING WITH RCI_REQUEST VALUE WE DO NEXT STEP
					IF (RCI_REQUEST == -1 ||
						RCI_REQUEST == -2 ||
						RCI_REQUEST == -3 ||
						RCI_REQUEST == -4 ||
						RCI_REQUEST == -5 ||
						RCI_REQUEST == -6)
						// EXIT RCI CYCLE
						SUCCESSFUL = 1;

					IF (RCI_REQUEST == 1)
					{
						// RECALCULATE FUNCTION VALUE
						FOR (I = 0; I < M; I++) {
							FVEC[I] = X[1]*INTERPOLATEFLIC(ZGAP, &FLIC[I*FLIC_POINTS], Z_GAP_SPACING, FLIC_POINTS, X[0]) + X[2] - FOBS[I];
						}
					}
					IF (RCI_REQUEST == 2)
					{
						// COMPUTE JACOBI MATRIX
						//FJAC = DF1/DX1, DF2/DX1, DF3/DX1, DF4/DX1,..., DF1/DX2, DF2/DX2, DF2/DX2, DF2/DX2,...
						FOR (I = 0; I < M; I++) {
							FJAC[I] = X[1]*INTERPOLATEFLIC(ZGAP, &DERIV[I*FLIC_POINTS], Z_GAP_SPACING, FLIC_POINTS, X[0]);
							FJAC[M + I] = INTERPOLATEFLIC(ZGAP, &FLIC[I*FLIC_POINTS], Z_GAP_SPACING, FLIC_POINTS, X[0]);
							FJAC[2*M + I] = 1;
						}
					}
				}

				/* GET SOLUTION STATUSES
					HANDLE            IN:	TR SOLVER HANDLE
					ITER              OUT:	NUMBER OF ITERATIONS
					ST_CR             OUT:	NUMBER OF STOP CRITERION
					R1                OUT:	INITIAL RESIDUALS
					R2                OUT:	FINAL RESIDUALS */
				IF (DTRNLSPBC_GET (&HANDLE, &ITER, &ST_CR, &R1, &R2) != TR_SUCCESS)
				{
					//EXIT IF UNSUCCESSFUL
					COUT << "| ERROR IN DTRNLSPBC_GET\N";
					MKL_FREEBUFFERS();
					RETURN 1;
				}

				// FREE HANDLE MEMORY
				IF (DTRNLSPBC_DELETE (&HANDLE) != TR_SUCCESS)
				{
					//EXIT IF UNSUCCESSFUL
					COUT << "| ERROR IN DTRNLSPBC_DELETE\N";
					MKL_FREEBUFFERS();
					RETURN 1;
				}

				// RELEASE INTERNAL MKL MEMORY
				MKL_FREEBUFFERS();

				//******************END OF SOLVE FOR THE BEST HEIGHT, A, AND B****************************

				//CHECK TO SEE IF THE SOLUTION IS BETTER THAN PREVIOUS MULTI-START SOLUTIONS
				IF (R2 < R_MIN) {
					H_BEST = X[0];
					A_BEST = X[1];
					B_BEST = X[2];
					R_MIN = R2;
				}
				IF (R1 < R1_MIN) {
					R1_MIN = R1;
				}
			}
			H[ GETINDEX(ROW, COL, 0, NROWS, NCOLS) ] = H_BEST;
			A[ GETINDEX(ROW, COL, 0, NROWS, NCOLS) ] = A_BEST;
			B[ GETINDEX(ROW, COL, 0, NROWS, NCOLS) ] = B_BEST;
			R[ GETINDEX(ROW, COL, 0, NROWS, NCOLS) ] = R_MIN;
		}
	}


	/* FREE ALLOCATED MEMORY */
	DELETE [] X;
	DELETE [] FVEC;
	DELETE [] FJAC;
	DELETE [] FOBS;
	DELETE [] LW;
	DELETE [] UP;

	RETURN 1;

}


int nlsq_FLIC_H_BruteC (double* Images, int nrows, int ncols, int nimages, double* ZGAP,
		double* FLIC, double* DERIV, double* H, double A, double B, double* R, double cutoff, int* C)
{
	//***********************************Variables, etc*******************************************
	int i, j, row, col;		//iterators
	int num_NN;				//the number of nearest neighbors for a given pixel
	int NN_row [9];			//the row numbers of the nearest neighbors
	int NN_col [9];			//the column numbers of the nearest neighbors
	double *fobs =
		new double[nimages];	//the observed data
	double r;				//the residual
	double r_min;			//the minimum residual found
	double h_best;			//the height for a pixel with the lowest residual
	int process;

	//Loop through all the pixels and calculate the best estimate of the height for each pixel
	for (row = 0; row < nrows; row++) {
		for (col = 0; col < ncols; col++) {

			//Get the nearest neighbor pixels
			num_NN = nearestNeighbors(NN_row, NN_col, row, col, nrows, ncols);

			//Make sure none of the pixels is above the cutoff threshold
			process = 1;
			for (j = 0; j < num_NN; j++) {
				if ( Images[getIndex(NN_row[j], NN_col[j], 0, nrows, ncols)] > I_cutoff) {
					C[ getIndex(row, col, 0, nrows, ncols) ] = 0;
					H[ getIndex(row, col, 0, nrows, ncols) ] = -1;
					R[ getIndex(row, col, 0, nrows, ncols) ] = -1;
					process = 0;
					break;
				}
			}

			if (process) {
				//Compute fobs
				for (i = 0; i < num_images; i++) {
					for (j = 0; j < num_NN; j++) {
						fobs[i] = fobs[i] + Images[getIndex(NN_row[j], NN_col[j], i, nrows, ncols)];
					}
					fobs[i] = fobs[i]/num_NN;
				}

				//Find the best height for each pixel with brute force
				r_min = numeric_limits<double>::infinity();

				for (j = 0; ZGAP[j] < h_max; j++) {

					//Compute the residual
					r = 0.0;
					for (i = 0; i < nimages; i++) {
						r = r + (A*FLIC[i*FLIC_points + j] + B - fobs[i])*(A*FLIC[i*FLIC_points + j] + B - fobs[i]);
					}

					//Check to see if the solution is better than previous multi-start solutions
					if (r < r_min) {
						h_best = ZGAP[j];
						r_min = r;
					}
				}

				H[ getIndex(row, col, 0, nrows, ncols) ] = h_best;
				R[ getIndex(row, col, 0, nrows, ncols) ] = r_min;
				C[ getIndex(row, col, 0, nrows, ncols) ] = 1;
			}
		}
	}

	delete [] fobs;
	return 1;

}


int nlsq_FLIC_H_BruteC_T (double* Images, int nrows, int ncols, int nimages, double* ZGAP,
		double* FLIC, double* DERIV, double* H, double A, double B, double* R, double cutoff, int* C)
{
	//***********************************Variables, etc*******************************************
	int i, j, row, col;		//iterators
	int num_NN;				//the number of nearest neighbors for a given pixel
	int NN_row [9];			//the row numbers of the nearest neighbors
	int NN_col [9];			//the column numbers of the nearest neighbors
	double *fobs;			//the observed data
	double r;				//the residual
	double r_min;			//the minimum residual found
	double h_best;			//the height for a pixel with the lowest residual
	int process;

	//Loop through all the pixels and calculate the best estimate of the height for each pixel
	#pragma omp parallel private(i,j,row,col,num_NN,NN_row,NN_col, fobs,r,r_min,h_best,process)
	{
		fobs = new double[nimages];

		//Loop through all the pixels and calculate the best estimate of the height for each pixel
		#pragma omp for
		for (row = 0; row < nrows; row++) {
			for (col = 0; col < ncols; col++) {

				//Get the nearest neighbor pixels
				num_NN = nearestNeighbors(NN_row, NN_col, row, col, nrows, ncols);

				//Make sure none of the pixels is above the cutoff threshold
				process = 1;
				for (j = 0; j < num_NN; j++) {
					if ( Images[getIndex(NN_row[j], NN_col[j], 0, nrows, ncols)] > I_cutoff) {
						C[ getIndex(row, col, 0, nrows, ncols) ] = 0;
						H[ getIndex(row, col, 0, nrows, ncols) ] = -1;
						R[ getIndex(row, col, 0, nrows, ncols) ] = -1;
						process = 0;
						break;
					}
				}

				if (process) {
					//Compute fobs
					for (i = 0; i < num_images; i++) {
						for (j = 0; j < num_NN; j++) {
							fobs[i] = fobs[i] + Images[getIndex(NN_row[j], NN_col[j], i, nrows, ncols)];
						}
						fobs[i] = fobs[i]/num_NN;
					}

					//Find the best height for each pixel with brute force
					r_min = numeric_limits<double>::infinity();

					for (j = 0; ZGAP[j] < h_max; j++) {

						//Compute the residual
						r = 0.0;
						for (i = 0; i < nimages; i++) {
							r = r + (A*FLIC[i*FLIC_points + j] + B - fobs[i])*(A*FLIC[i*FLIC_points + j] + B - fobs[i]);
						}

						//Check to see if the solution is better than previous multi-start solutions
						if (r < r_min) {
							h_best = ZGAP[j];
							r_min = r;
						}
					}

					H[ getIndex(row, col, 0, nrows, ncols) ] = h_best;
					R[ getIndex(row, col, 0, nrows, ncols) ] = r_min;
					C[ getIndex(row, col, 0, nrows, ncols) ] = 1;
				}
			}
		}
		//free memory
		delete [] fobs;

	}  //#pragma omp parallel shared() private()
	return 1;

}


//test getNeighbors;
	int* m = new int[200];
	int* n = new int[200];
	int num;

	//int getNeighbors(int* m, int* n, int i, int j, int dist, int nrows, int ncols);

	num = getNeighbors(m, n, 6, 6, 1, 7, 7);
	cout << "num neighbors: " << num << "\n";
	cout << "row / col: \n";
	for (int ii = 0; ii < num; ii++)
		cout << m[ii] << " " << n[ii] << "\n";

	delete [] m;
	delete [] n;
	return 0;
	
	
//Extra Code deleted from main on 11/16/2010
    /*
    //Get an estimate for A, B, and each pixel height by performing a local nlsq fit
    //for each pixel in a randomly selected list
    
    if (nPixtoFitGlobally > num_rows*num_cols) nfitPix = num_rows*num_cols;
    else nfitPix = nPixtoFitGlobally;

	randPixelsC(fitPixels, Images, num_rows, num_cols, num_images, nfitPix, I_cutoff);

	cout << "\nStarting nlsq_FLIC_HAB_local\n";
	start = time(NULL);

	#pragma omp parallel for shared(Images,fitPixels,num_rows,num_cols,num_images,ZGAP,FLIC,DERIV,H,R,A,B) private(k,Ho,Ao,Bo)
	for (k = 0; k < nfitPix; k++) {

		//Start a multi-start approach to find the best height
		flag = nlsq_FLIC_HAB_pixel_MS (Images, fitPixels[k], num_rows, num_cols, num_images, ZGAP,
		    FLIC, DERIV, Ho, Ao, Bo, Ro);

		if(flag == 1)  {  //successful
			H[fitPixels[k]] = Ho;
			R[fitPixels[k]] = Ro;
			A[fitPixels[k]] = Ao;
			B[fitPixels[k]] = Bo;

			//cout << "\npixel: " << fitPixels[k] << " H best: " << Ho << " A best: " << Ao << " B best: " << Bo << " R: " << Ro;
		}
	}

	walltime = time(NULL) - start;
	cout << "\ntime for nlsq_HAB_local: " << walltime << "\n";

    //Compute the average A and B
    Ao=0.0;
    for (i = 0; i < nfitPix; i++) Ao = Ao + A[ fitPixels[i] ];
    Ao = Ao/nfitPix;

    Bo=0.0;
    for (i = 0; i < nfitPix; i++) Bo = Bo + B[ fitPixels[i] ];
    Bo = Bo/nfitPix;

    A_guess = Ao;	//The initial guess of the scaling parameter for the height fitting algorithm
    B_guess = Bo;

    cout << "After local minimizations - Ao mean: " << Ao << " Bo mean: " << Bo << "\n";

    //Perform a global optimization to get the best fit A and B for the randomly
    //selected pixels
	cout << "\nStarting nlsq_FLIC_HAB_global\n";
    start = time(NULL);

    nlsq_FLIC_HAB_global (Images, fitPixels, nfitPix, num_rows, num_cols, num_images, ZGAP,
        FLIC, DERIV, H, Ao, Bo, R);

    walltime = time(NULL) - start;

    cout << "\ntime for nlsq_HAB_global: " << walltime << "\n";
    cout << "After global minimizations - Ao mean: " << Ao << " Bo mean: " << Bo << "\n";

    //Calculate the best fit height for every pixel in the image using the A and B
    //parameters acquired from the global fit.  Brute force is used to calculate the best-
    //fit heights
    allPixelsC(fitPixels, Images, num_rows, num_cols, num_images, nfitPix, I_cutoff);
    nlsq_FLIC_H_Brute (Images, fitPixels, nfitPix, num_rows, num_cols, num_images, ZGAP, FLIC, DERIV, H, Ao, Bo, R);


	cout << "\nStarting nlsq_FLIC_HAB_local\n";
	start = time(NULL);

	chunk = CHUNKSIZE;
	allPixelsC(fitPixels, Images, num_rows, num_cols, num_images, nfitPix, I_cutoff);
	//mkl_set_num_threads(3);
	//omp_set_num_threads(5);

	//#pragma omp parallel shared(H,R,A,B,chunk) private(k,Ho,Ao,Bo,flag) firstprivate(Images,fitPixels,num_rows,num_cols,num_images,ZGAP,FLIC,DERIV)
	//{
		//#pragma omp for schedule(dynamic, chunk)
		for (k = 0; k < nfitPix; k++) {

			//Start a multi-start approach to find the best height
			flag = nlsq_FLIC_HAB_pixel_MS (Images, fitPixels[k], num_rows, num_cols, num_images, ZGAP,
					FLIC, DERIV, Ho, Ao, Bo, Ro, H_min, H_max, MS_step);

			if(flag == 1)  {  //successful
				H[fitPixels[k]] = Ho;
				R[fitPixels[k]] = Ro;
				A[fitPixels[k]] = Ao;
				B[fitPixels[k]] = Bo;

			//cout << "\npixel: " << fitPixels[k] << " H best: " << Ho << " A best: " << Ao << " B best: " << Bo << " R: " << Ro;
			}
			if (k % 1000 == 0) {
				cout << "\nFinished Calculating for Pixel #: " << fitPixels[k] << " (the " << k << "th pixel in the loop). ";
				if (flag == 1) cout << " H: " << Ho << " A: " << Ao << " B: " << Bo << " R: " << Ro;
				else cout << "No solution for the pixel.";
			}
		}  //for
	//} //#pragma omp parallel

	walltime = time(NULL) - start;
	cout << "\ntime for nlsq_HAB_local: " << walltime << "\n";
	 */


//Old FLIC Local Fitter
int FLIC_fitter(double* Images, int startRow, int startCol, int* fitPixels, int nfit, int& dist, int nrows, int ncols, int nimages,
		double* ZGAP, double* FLIC, double* DERIV, double* H, double* A, double* B, double* R, int* F, int constraint, double maxChange) {

	int* m;  // Holds the row number for neighbor pixels
	int* n;	 // Holds the column number for neighbor pixels
	int nneighbors;  //The number of neighbors
	int pixel;
	int i, j, flag, row, col, num;
	double Ho, Ao, Bo, Ro;
	static int count = 0;
	int mNN [8];  //Holds the row numbers of the nearest-neighbors
	int nNN [8];  //Holds the col numbers of the nearest-neighbors
	int num_NN;  //The number of nearest neighbors
	double h_LB;
	double h_UB;



	if (dist == 0) {

		//initialize the variables
		for (i = 0; i < nrows*ncols; i++) F[i] = 1;  //indicates if a pixel has been processed

		//Process pixels in the fitPixels list
		for (i = 0; i < nfit; i++) {
			F[ fitPixels[i] ] = 0;  //Indicates that it should be processed
		}

		//Get the pixel number for the first pixel to process
		pixel = getIndex(startRow, startCol, 0, nrows, ncols);

		//Calculate the height of the start pixel
		flag = nlsq_FLIC_HAB_pixel_MS (Images, pixel, nrows, ncols, nimages, ZGAP, FLIC, DERIV, Ho, Ao, Bo, Ro, H_min, H_max, MS_step);

		if(flag == 1)  {  //successful
			H[pixel] = Ho;
			R[pixel] = Ro;
			A[pixel] = Ao;
			B[pixel] = Bo;
			F[pixel] = 1;
			//cout << "\nH: " << Ho << " A: " << Ao << " B: " << Bo << " R: " << Ro << "\n";
		}
		else { //unsuccessful
			return 0;
		}
	}

	//Allocate memory to hold the neighbor pixel locations
	m = new int[8*dist];	if ( (startRow - dist < 0) && (startRow + dist >= nrows) && (startCol - dist < 0) && (startCol + dist >= ncols) && (dist >= 4)) {
		return 1;  //exit successful - All pixels processed
	}
	n = new int[8*dist];

	//Get the pixels that are distance "dist" from the startRow and startCol
	nneighbors = getNeighbors(m, n, startRow, startCol, dist, nrows, ncols);

	//Sort and select for the neighbors that have not been processed yet
	num = 0;
	for (i= 0; i < nneighbors; i++) {
		pixel = getIndex(m[i], n[i], 0, nrows, ncols);
		if (F[pixel] != 1) {
			m[num] = m[i];
			n[num] = n[i];
			num++;
		}
	}
	nneighbors = num;  //The number of unprocessed neighbors

	//Calculate the constrained heights of the neighbor pixels
	for (i = 0; i < nneighbors; i++) {

		//Calculate the maximum allowed range of heights based on the height of the nearest neighbors
		num_NN = getNeighbors(mNN, nNN, m[i], n[i], 1, nrows, ncols);

		h_LB = H_max;
		h_UB = H_min;

		for (j = 0; j < num_NN; j++) {
			pixel = getIndex(mNN[j], nNN[j], 0, nrows, ncols);

			if (F[pixel] == 1) {

				if (H[pixel] - maxChange < h_LB)
					h_LB = H[pixel] - maxChange;

				if (H[pixel] + maxChange > h_UB)
					h_UB = H[pixel] + maxChange;
			}
		}

		if (h_LB < H_min)
			h_LB = H_min;
		if (h_UB > H_max)
			h_UB = H_max;


		//Calculate the constrained height
		pixel = getIndex(m[i], n[i], 0, nrows, ncols);
		flag = nlsq_FLIC_HAB_pixel_MS (Images, pixel, nrows, ncols, nimages, ZGAP, FLIC, DERIV, Ho, Ao, Bo, Ro, h_LB, h_UB, MS_step);

		if(flag == 1)  {  //successful
			H[pixel] = Ho;
			R[pixel] = Ro;
			A[pixel] = Ao;
			B[pixel] = Bo;
			F[pixel] = 1;
			cout << " H: " << Ho << " A: " << Ao << " B: " << Bo << " R: " << Ro << "\n";
		}

		else if (flag == 0) { //Catstrophic error
			delete [] n;
			delete [] m;
			return 0;
		}

		else if (flag == 2)
			F[pixel] = 2;  //Pixel processed but the nlsq solver did not converge to an appropriate solution

		else {
			cout << "Unknown flag returned - Aborting\n";
			delete [] n;
			delete [] m;
			return 0;
		}

	}
	// delete allocated memory
	delete [] m;
	delete [] n;

	// Compute heights for the next level of pixels
	/*
	dist = dist + 1;
	cout << "dist: " << dist;
	if ( (startRow - dist < 0) && (startRow + dist >= nrows) && (startCol - dist < 0) && (startCol + dist >= ncols) && (dist >= 4)) {
		return 1;  //exit successful - All pixels processed
	}

	flag = FLIC_fitter_Constrained (Images, startRow, startCol, dist, nrows, ncols, nimages, ZGAP, FLIC, DERIV, H, A, B, R, F, maxChange);

	if (flag == 0) {
		return 0;  //Error occurred in processing - return unsuccessful
	}
	*/
	//Return successful
	return 1;
}


	/*
	//Open the background image for the reference slide and correct the reference intensities
	file_path = "images/" + image_name + "C" + image_file_ext;
	getImageSize(file_path, num_rows, num_cols);
	Images_temp = new int[ num_rows*num_cols ];
	double camera_I = 0;

	if (loadImage(Images_temp, file_path, num_rows, num_cols) != 1) return 1;  //import the images

	for (k = 0; k < num_rows*num_cols; k++) {
		camera_I = camera_I + Images_temp[k];
	}

	camera_I = camera_I/(num_rows*num_cols);
	cout << "\nCamera: ";
	cout << camera_I << " ";
	cout << "\n";

	delete [] Images_temp;



	//Open the reference images and record the average intensity for each reference image
	generate_image_seq_path(file_path, "images/", image_name + "R", image_file_ext, seq_start_num);
	getImageSize(file_path, num_rows, num_cols);
	Images_temp = new int[ num_rows*num_cols*num_images*num_image_sets ];
	vector<double> ref_I (num_images,0);

	for (j = 0; j < num_image_sets; j++) {
		for (i = 0; i < num_images; i++) {

			index = j*num_images + i;
			generate_image_seq_path(file_path, "images/", image_name + "R", image_file_ext, seq_start_num + index);
			if ( loadImage(&Images_temp[index*num_rows*num_cols], file_path, num_rows, num_cols) != 1) return 1;  //import the images

			//Record the average intensity of the pixels in the reference image
			intensity = 0;
			for (k = 0; k < num_rows*num_cols; k++)
				intensity = intensity + Images_temp[k + index*num_rows*num_cols];
			intensity = intensity/(num_rows*num_cols);
			ref_I[i] = ref_I[i] + intensity;
		}
	}

	for (i = 0; i < num_images; i++)
		ref_I[i] = ref_I[i]/num_image_sets - camera_I;

	//Normalize the reference intensities
	min = *min_element(ref_I.begin(),ref_I.end());
	for (i = 0; i < ref_I.size(); i++) ref_I[i] = ref_I[i]/min;

	delete [] Images_temp;


	//Delete this in the future
	ref_I[0] = 1.0;
	ref_I[1] = 1.0;
	ref_I[2] = 1.0;
	ref_I[3] = 1.0;
	ref_I[4] = 1.0;
	ref_I[5] = 1.0;
	ref_I[6] = 1.0;
	ref_I[7] = 1.0;
	ref_I[8] = 1.2;
	ref_I[9] = 1.35;
	ref_I[10] = 1.35;


	cout << "\nFLIC Reference: ";
	for (i = 0; i < ref_I.size(); i++)
		cout << ref_I[i] << " ";
	cout << "\n";
	*/
